syntax = "proto3";
import "nanopb.proto";


message LoraCfg {
  uint32 bw = 1;
  uint32 cr = 2;
  uint32 sf = 3;
  uint32 preamble_length = 4;  
  uint32 fhss_pre_len = 5;
}

message TestCfg {
  bool cw_test_mode = 1;
  bool preamble_test_mode = 2;
  bool test_fec = 3;
}

message FECCfg {
  enum Type {
    NONE = 0;
    INTERLEAVE = 1;
    CONV = 2;
    RSV = 3;
    RSVGOLAY = 4;
  };
  Type type = 1;
  int32 conv_rate = 2;
  int32 conv_order = 3;
  int32 rs_num_roots = 4;
}

message RadioCfg {
  enum Type {
    LORA = 0;
    FSK = 1;
  };
  Type type = 1;
  int32 frequency = 2;
  repeated int32 frequencies = 3 [(nanopb).max_count = 16];
  int32 tx_power = 4;
  LoraCfg lora_cfg = 5;
}

message NetCfg {
  string beacon_msg = 1 [(nanopb).max_size = 256];
  uint32 beacon_interval = 2;
  uint32 num_offsets = 3;
  uint32 pld_len = 4;
  uint32 full_pkt_len = 5;
}

message SysCfgMsg {
  enum Mode {
    NORMAL = 0;
    MODE_RESET = 1;
    MODE_SILENT = 2;
    TESTING = 3;
  };
  Mode mode = 1;
  uint32 address = 2;
  RadioCfg radio_cfg = 3;
  TestCfg test_cfg = 4;
  FECCfg fec_cfg = 5;
  NetCfg net_cfg = 6;
  bool gps_en = 7;
  bool log_packets_en = 8;
  bool boot_log_en = 9;
  bool watchdog_timer_en = 10;
}

message ClockSetMsg {
  uint32 time = 1;
}

message StatusMsg {
  enum Status {
    BOOTING = 0;
    MANAGEMENT = 1;
    RUNNING = 2;
  }
  Status status = 1;
  bool tx_full = 2;
  uint32 time = 3;
  bool oled_on = 4;
  uint32 total_rx_pkt = 5;
  uint32 total_rx_corr_pkt = 6;
  uint32 total_tx_pkt = 7;
  uint32 last_rx_rssi = 8;
  uint32 last_rx_snr = 9;
  uint32 heap_size = 10;
}

message DbgMsg {
  string msg = 1 [(nanopb).max_size = 256];
}

message SerialCRCMsg {
  uint32 crc32 = 1;
}

message BootLogMsg {
  bool valid = 1;
  uint32 boot_time = 2;
  uint32 count = 3; 
}

message GPSMsg {
  bool valid = 1;
  float lat = 2;
  float lon = 3;
}

message LogMsg {
  bool valid = 1;
  uint32 count = 2;
  uint32 timestamp = 3;
  uint32 sender = 4;
  uint32 ttl = 5;
  uint32 stream_id = 6;
  sint32 rssi = 7;
  sint32 snr = 8;
  int32 rx_size = 9;
  uint32 comp_crc = 10;
  uint32 crc = 11;
  uint32 uptime = 12;
  GPSMsg gps_msg = 13; 
}

message TimeMsg {
  uint32 time = 1;
}

message SerialMsg {
  option (nanopb_msgopt).descriptorsize = DS_8;
  enum Type {
    GET_CONFIG = 0;
    SET_CONFIG = 1;
    CONFIG = 2;
    DATA = 3;
    CLOCK_SET = 4;
    STATUS = 5;
    GET_STATUS = 6;
    STAY_IN_MGT = 7;
    DEBUG_MSG = 8;
    REBOOT = 9;
    ERASE_LOGS = 10;
    ERASE_BOOT_LOGS = 11;
    ERASE_CFG = 12;
    READ_LOG = 13;
    READ_LOG_RETRY = 14;
    REPLY_LOG = 15;
    READ_BOOT_LOG = 16;
    READ_BOOT_LOG_RETRY = 17;
    REPLY_BOOT_LOG = 18;
    CRC_ERR = 19;
    SET_TIME = 20;
    ACK = 21;
    ERR = 22;
    ENTER_KISS_MODE = 23;
    EXIT_KISS_MODE = 24;
    BOOT_LOG = 25;
    LOG = 26;
    UPDATE = 27;
    VERSION = 28;
    TURN_OLED_ON = 29;
    TURN_OLED_OFF = 30;
    INT_PARAMS = 31;
  }
  Type type = 1;
  bool retry = 2;

  SysCfgMsg sys_cfg = 3 [(nanopb).type = FT_POINTER];
  ClockSetMsg clock_set = 4 [(nanopb).type = FT_POINTER]; 
  StatusMsg status = 5 [(nanopb).type = FT_POINTER];  
  DbgMsg dbg_msg = 6 [(nanopb).type = FT_POINTER];
  LogMsg log_msg = 7 [(nanopb).type = FT_POINTER];
  BootLogMsg boot_log_msg = 8 [(nanopb).type = FT_POINTER];
  DataMsg data_msg = 9 [(nanopb).type = FT_POINTER];
  ErrorMsg error_msg = 10 [(nanopb).type = FT_POINTER];
  TimeMsg time_msg = 11 [(nanopb).type = FT_POINTER];
  UpdateMsg update_msg = 12 [(nanopb).type = FT_POINTER, (nanopb).descriptorsize = DS_4];
  VersionMsg ver_msg = 13 [(nanopb).type = FT_POINTER];
  IntParamsMsg int_params_msg = 14 [(nanopb).type = FT_POINTER];
}

message VersionMsg {
    string msg = 1 [(nanopb).max_size = 128];
}

message ErrorMsg {
  enum Type {
    CRC_ERR = 0;
    OTHER_ERR = 1;
  }
  Type type = 1;
  string msg = 2 [(nanopb).max_size = 256];
}

message DataMsg {
  enum Type {
    TX = 0;
    RX = 1;
    KISSTX = 2;
    KISSRX = 3;
  }
  Type type = 1;
  uint32 stream_id = 2;
  uint32 ttl = 3;
  uint32 sender = 4;
  uint32 sym_offset = 5;
  bytes payload = 6 [(nanopb).max_size = 512];
  uint32 crc = 7; 
  bool voice = 8;
  uint32 kiss_cur_frame = 9;
  uint32 kiss_tot_frames = 10;
  uint32 kiss_stream_id = 11;
  bool redundant = 12;
}

message UpdateMsg {
  option (nanopb_msgopt).descriptorsize = DS_8;
  enum Type {
    FIRST = 0;
    LAST = 1;
    MIDDLE = 2;
    ACK = 3;
    ACKERR = 4;
  }
  Type type = 1;
  int32 pkt_cnt = 2;
  string path = 3 [(nanopb).max_size = 128];
  bytes pld = 4 [(nanopb).max_size = 4096];
  bytes sha256_pkt = 5 [(nanopb).max_size = 32];
  bytes sha256_upd = 6 [(nanopb).max_size = 32];
  string err_reason = 7 [(nanopb).max_size = 32];
}

message IntParamsMsg {
  int32 freq_wobble = 1;
  int32 channel = 2;
  int32 time_offset = 3;
  int32 pwr_offset = 4;
}